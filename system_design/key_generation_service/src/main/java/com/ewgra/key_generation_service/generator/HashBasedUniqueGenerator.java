package com.ewgra.key_generation_service.generator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.DigestUtils;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

// HashBasedUniqueGenerator we can use as fallback when hash generated by HashBasedGenerator already
// presented in storage. There is several strategies of making hash unique. We can add as a salt user IP,
// sequence, random data or current time, something that unique enough at this point of time for such hash.
@Component
public class HashBasedUniqueGenerator {
	@Autowired
	private HashBasedGenerator hashBasedGenerator;

	public String generate(String data) {
		String random = String.valueOf(ThreadLocalRandom.current().nextLong());

		return hashBasedGenerator.generate(data+random);
	}
}